{"version":3,"sources":["AnalyzerResultViewer/FragmentViewer.tsx","utils/prettyStringify.ts","AnalyzerResultViewer/AnalyzerResultViewer.tsx","utils/ellipsis.ts","analyzer/analyzeJson.ts","utils/interner.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["FragmentViewer","React","memo","_ref","value","fragment","_React$useState","useState","_React$useState2","Object","slicedToArray","expanded","setExpanded","handleChange","useCallback","event","isExpanded","react_default","a","createElement","ExpansionPanel","onChange","ExpansionPanelSummary","Typography","path","join","ExpansionPanelDetails","JSON","stringify","AnalyzerResultViewer","result","Fragment","variant","compactJsonLength","originalJsonLength","fragmentsInfo","length","map","fragInfo","index","key","string","maxLength","arguments","undefined","substr","ellipsis","preview","fragmentsCount","stringifiedLength","percentOfTotalLength","style","width","fragments","defaultOptions","indexPredicate","maxFragmentsLimit","analyzeJson","json","options","optionsWithDefaults","objectSpread","rootValue","parse","normalizedJsonTextLength","fragmentIndex","computeDedupFragmentIndex","entries","_ref2","f","reduce","sum","v","filter","dupInfo","sort","b","slice","_ref3","indexObject","hash","stableStringify","previousSetForHash","defineProperty","concat","toConsumableArray","addFragmentToIndex","Array","isArray","keys","newPath","newValue","makeInterner","cache","Map","has","get","set","duplicateValue","whatever","exampleJson","prop1","prop2","prop3","prop4","prop5","AnalyzerComponent","includeString","analyzerResult","useMemo","e","analyzeOrError","Error","stack","toString","App","setJson","handleJsonChange","target","_React$useState3","_React$useState4","setIncludeString","handleIncludeStringChange","checked","interner","className","height","display","flexDirection","margin","TextField","id","label","multiline","rows","rowsMax","placeholder","FormControlLabel","control","Checkbox","Divider","App_AnalyzerComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2adee5b6.chunk.js","sourcesContent":["import { Typography } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport React from 'react';\n\nimport { JsonFragment } from '../analyzer/JsonFragment';\nimport { prettyStringify } from '../utils/prettyStringify';\n\nexport type FragmentViewerProps = { fragment: JsonFragment };\nexport const FragmentViewer = React.memo(\n    ({ fragment }: FragmentViewerProps) => {\n        const [expanded, setExpanded] = React.useState(false);\n        const handleChange = React.useCallback((event, isExpanded) => {\n            setExpanded(isExpanded);\n        }, [setExpanded]);\n        return <ExpansionPanel expanded={expanded} onChange={handleChange}>\n            <ExpansionPanelSummary>\n                <Typography>Path: {fragment.path.join('.')}</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                {expanded && <pre>\n                    {prettyStringify(fragment.value)}\n                </pre>\n                }\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    });","export const prettyStringify = (value: any): string => {\n    return JSON.stringify(value, null, '  ');\n}\n","import { Typography } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport React, { ChangeEvent } from 'react';\n\nimport { AnalyzerResult } from \"../analyzer/AnalyzerResult\";\nimport { FragmentViewer } from './FragmentViewer';\nimport { ellipsis } from '../utils/ellipsis';\n\nexport type AnalyzerResultViewerProps = {\n    result: AnalyzerResult\n};\nexport const AnalyzerResultViewer = React.memo(({ result }: AnalyzerResultViewerProps) => {\n    return <>\n        <Typography variant=\"body2\">\n            Original JSON is {result.compactJsonLength} characters ({result.originalJsonLength} before compact rewrite).</Typography>\n        <Typography variant=\"body2\">\n            Found {result.fragmentsInfo.length} duplicated fragments.\n      </Typography>\n        <div>\n            {result.fragmentsInfo.map((fragInfo, index) => (\n                <ExpansionPanel key={index}>\n                    <ExpansionPanelSummary>\n                        <Typography>Fragment [{ellipsis(fragInfo.preview, 50)}]: Found {fragInfo.fragmentsCount} times totalling {fragInfo.stringifiedLength} characters ({fragInfo.percentOfTotalLength}%).</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <div style={{ width: '100%' }}>\n                            {fragInfo.fragments.map((fragment, index) => (\n                                <FragmentViewer key={index} fragment={fragment} />\n                            ))\n                            }\n                        </div>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            ))\n            }\n        </div></>;\n});","export const ellipsis = (string: string, maxLength: number = 100) => {\n  if (string.length > maxLength) {\n    return string.substr(0, maxLength - 1) + '…';\n  }\n  else {\n    return string;\n  }\n};\n","import stableStringify from 'json-stable-stringify';\n\nimport { AnalyzerResult } from './AnalyzerResult';\nimport { DuplicateInfo } from './DuplicateInfo';\nimport { JsonFragment } from './JsonFragment';\nimport { JsonValue } from './JsonValue';\nimport { Path } from './Path';\n\n\nexport type AnalyzeOptions = {\n  indexPredicate: (value: JsonValue, path: Path) => boolean;\n  maxFragmentsLimit: number;\n}\n\n\nexport const defaultOptions: AnalyzeOptions = {\n  indexPredicate: (value: JsonValue, path: Path) => true,\n  maxFragmentsLimit: 100\n}\n\n\nexport const analyzeJson = (json: string, options?: Partial<AnalyzeOptions>): AnalyzerResult => {\n  const optionsWithDefaults = { ...defaultOptions, ...options };\n\n  const rootValue = JSON.parse(json);\n  const normalizedJsonTextLength = JSON.stringify(rootValue).length;\n  const fragmentIndex = computeDedupFragmentIndex(rootValue, optionsWithDefaults);\n  const fragmentsInfo = Object.entries(fragmentIndex)\n    .map(\n      ([key, fragments]): DuplicateInfo => {\n        const stringifiedLength = fragments.map(f => JSON.stringify(f.value).length).reduce((sum, v) => sum + v);\n        return {\n          preview: JSON.stringify(fragments[0].value).substr(0, 200),\n          fragmentsCount: fragments.length,\n          stringifiedLength: stringifiedLength,\n          percentOfTotalLength: (stringifiedLength / normalizedJsonTextLength) * 100,\n          fragments,\n\n        }\n      }\n    )\n    .filter(dupInfo => dupInfo.fragmentsCount >= 2)\n    .sort((a, b) => {\n      // Sort descending\n      return b.stringifiedLength - a.stringifiedLength;\n    })\n    .slice(0, optionsWithDefaults.maxFragmentsLimit);\n\n  return {\n    originalJsonLength: json.length,\n    compactJsonLength: normalizedJsonTextLength,\n    fragmentsInfo,\n  };\n}\n\n\n\ntype FragmentIndex = {\n  [hash: string]: JsonFragment[]\n};\n\n\nconst computeDedupFragmentIndex = (rootValue: JsonValue, { indexPredicate }: AnalyzeOptions): FragmentIndex => {\n\n\n  const addFragmentToIndex = (fragmentIndex: FragmentIndex, fragment: JsonFragment): FragmentIndex => {\n    const hash = stableStringify(fragment.value);\n    const previousSetForHash = fragmentIndex[hash] || [];\n    return {\n      ...fragmentIndex,\n      [hash]: [...previousSetForHash, fragment]\n    };\n  }\n\n\n  const indexObject = (value: JsonValue, path: Path, index: FragmentIndex): FragmentIndex => {\n    if (value === null || value === undefined) {\n      return index;\n    }\n    if (!indexPredicate(value, path)) {\n      return index;\n    }\n\n    index = addFragmentToIndex(index, { value: value, path: path });\n\n\n    if (Array.isArray(value) || typeof value === 'object') {\n      return Object.keys(value).reduce(\n        (index, key) => {\n          const newPath = [...path, key];\n          const newValue = (value as any)[key] as JsonValue;\n          return indexObject(newValue, newPath, index);\n        }\n        , index);\n    } else {\n      return index;\n    }\n  }\n\n  const rootPath: Path = [];\n  const emptyIndex: FragmentIndex = {};\n  return indexObject(rootValue, rootPath, emptyIndex);\n}\n\n\n","import stableStringify from 'json-stable-stringify';\nimport React from 'react';\n\nexport type Interner = <T extends any>(orginal: T) => T;\n\n\nexport const makeInterner = (): Interner => {\n    const cache = new Map<string, any>();\n\n    return (value) => {\n        const key = stableStringify(value);\n        if (cache.has(key)) {\n            return cache.get(key);\n        } else {\n            cache.set(key, value);\n            return value;\n        }\n    }\n};\n\nexport const useInterner = () => {\n    return React.useMemo(makeInterner, []);\n};","import './App.css';\n\nimport { FormControlLabel, Typography } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport React, { ChangeEvent } from 'react';\n\nimport { AnalyzerResultViewer } from './AnalyzerResultViewer/AnalyzerResultViewer';\nimport { analyzeJson } from './analyzer/analyzeJson';\nimport { AnalyzerResult } from './analyzer/AnalyzerResult';\nimport { useInterner } from './utils/interner';\n\nimport Divider from '@material-ui/core/Divider';\n\nconst duplicateValue = { whatever: 'This object is used several times' };\nconst exampleJson = JSON.stringify(\n  {\n    prop1: duplicateValue,\n    prop2: duplicateValue,\n    prop3: {\n      prop4: duplicateValue,\n      prop5: [\n        duplicateValue,\n        duplicateValue,\n        'otherValue'\n      ]\n    },\n  }, null, '  ');\n\n\n\nconst App: React.FC = () => {\n  const [json, setJson] = React.useState(exampleJson);\n  const handleJsonChange = React.useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setJson(event.target.value);\n  }, [setJson]);\n\n  const [includeString, setIncludeString] = React.useState(false);\n  const handleIncludeStringChange = React.useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setIncludeString(event.target.checked);\n  }, [setIncludeString]);\n\n\n  const interner = useInterner();\n\n  return (\n    <div className=\"App\"\n      style={\n        interner({\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          margin: '8px',\n        })\n      }>\n\n      <Typography variant=\"h6\">Config</Typography>\n      <TextField\n        id=\"json-text\"\n        label=\"Json\"\n        multiline\n        rows=\"15\"\n        rowsMax=\"15\"\n        value={json}\n        onChange={handleJsonChange}\n        margin=\"normal\"\n        variant=\"outlined\"\n        placeholder=\"Paste JSON block here\"\n        style={\n          interner({ width: '100%' })\n        }\n      />\n      <FormControlLabel\n        label=\"Include strings\"\n        control={\n          <Checkbox\n            id=\"include-string-checkbox\"\n            checked={includeString}\n            onChange={handleIncludeStringChange}\n          />}>\n      </FormControlLabel>\n\n\n\n      {json && <>\n        <Divider variant=\"fullWidth\" />\n        <Typography variant=\"h6\">Result</Typography>\n        <AnalyzerComponent json={json} includeString={includeString} /></>}\n\n    </div>\n  );\n}\n\n\ntype AnalyzerComponentProps = { json: string, includeString: boolean };\nconst AnalyzerComponent = ({ json, includeString }: AnalyzerComponentProps) => {\n  const analyzerResult: AnalyzerResult | Error = React.useMemo(() => analyzeOrError(json, includeString), [json, includeString]);\n\n  if (analyzerResult instanceof Error) {\n    return <div>\n      <Typography variant=\"body2\">Error analyzing Json:</Typography>\n      <pre>{analyzerResult.stack || analyzerResult.toString()}</pre>\n\n    </div>;\n  } else {\n    return <AnalyzerResultViewer result={analyzerResult} />\n  }\n}\n\nexport default App;\n\nfunction analyzeOrError(json: string, includeString: boolean): AnalyzerResult | Error {\n  try {\n    return analyzeJson(json, {\n      indexPredicate: (value, path) => (typeof value !== 'number' && typeof value !== 'boolean' && (includeString || typeof value !== 'string')),\n      maxFragmentsLimit: 20\n    });\n  } catch (e) {\n    return e as Error;\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}