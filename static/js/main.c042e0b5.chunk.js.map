{"version":3,"sources":["computeDedupInfo.ts","interner.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["defaultOptions","indexPredicate","value","path","maxFragmentsLimit","computeDedupFragmentIndex","rootValue","_ref3","indexObject","index","undefined","fragmentIndex","fragment","hash","stableStringify","previousSetForHash","Object","objectSpread","defineProperty","concat","toConsumableArray","addFragmentToIndex","Array","isArray","keys","reduce","key","newPath","newValue","makeInterner","cache","Map","has","get","set","duplicateValue","whatever","exampleJson","JSON","stringify","prop1","prop2","prop3","prop4","prop5","FragmentViewer","React","memo","_ref","_React$useState5","useState","_React$useState6","slicedToArray","expanded","setExpanded","handleChange","useCallback","event","isExpanded","react_default","a","createElement","ExpansionPanel","onChange","ExpansionPanelSummary","Typography","join","ExpansionPanelDetails","ellipsis","string","maxLength","arguments","length","substr","App","_React$useState","_React$useState2","json","setJson","handleJsonChange","target","_React$useState3","_React$useState4","includeString","setIncludeString","handleIncludeStringChange","checked","dedupInfo","useMemo","options","optionsWithDefaults","parse","normalizedJsonTextLength","fragmentsInfo","entries","map","_ref2","fragments","stringifiedLength","f","sum","v","preview","fragmentsCount","percentOfTotalLength","filter","dupInfo","sort","b","slice","originalJsonTextLength","computeJsonDupsInfo","interner","className","style","height","display","flexDirection","margin","TextField","id","label","multiline","rows","rowsMax","variant","width","FormControlLabel","control","Checkbox","fragInfo","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c042e0b5.chunk.js","sourcesContent":["import stableStringify from 'json-stable-stringify';\nimport { number } from 'prop-types';\n\n\nexport interface JsonFragment {\n  value: JsonValue;\n  path: Path\n}\n\n\nexport type JsonDupsInfo = {\n  originalJsonTextLength: number,\n  normalizedJsonTextLength: number,\n  fragmentsInfo: FragmentInfo[];\n}\n\nexport type FragmentInfo = {\n  fragmentsCount: number;\n  stringifiedLength: number;\n  percentOfTotalLength: number;\n  preview: string;\n  fragments: JsonFragment[];\n};\n\nexport type Path = string[];\n\nexport type Options = {\n  indexPredicate: (value: JsonValue, path: Path) => boolean;\n  maxFragmentsLimit: number;\n}\n\nexport interface JsonObject { [key: string]: JsonValue };\nexport interface JsonArray extends Array<JsonValue> {\n}\nexport type JsonValue = number | string | boolean | JsonArray | JsonObject;\n\n\nexport const defaultOptions: Options = {\n  indexPredicate: (value: JsonValue, path: Path) => true,\n  maxFragmentsLimit: 100\n}\n\n\nexport const computeJsonDupsInfo = (json: string, options?: Partial<Options>): JsonDupsInfo => {\n  const optionsWithDefaults = { ...defaultOptions, ...options };\n\n  const rootValue = JSON.parse(json);\n  const normalizedJsonTextLength = JSON.stringify(rootValue).length;\n  const fragmentIndex = computeDedupFragmentIndex(rootValue, optionsWithDefaults);\n  const fragmentsInfo = Object.entries(fragmentIndex)\n    .map(\n      ([key, fragments]): FragmentInfo => {\n        const stringifiedLength = fragments.map(f => JSON.stringify(f.value).length).reduce((sum, v) => sum + v);\n        return {\n          preview: JSON.stringify(fragments[0].value).substr(0, 200),\n          fragmentsCount: fragments.length,\n          stringifiedLength: stringifiedLength,\n          percentOfTotalLength: (stringifiedLength / normalizedJsonTextLength) * 100,\n          fragments,\n\n        }\n      }\n    )\n    .filter(dupInfo => dupInfo.fragmentsCount > 2)\n    .sort((a, b) => {\n      // Sort descending\n      return b.stringifiedLength - a.stringifiedLength;\n    })\n    .slice(0, optionsWithDefaults.maxFragmentsLimit);\n\n  return {\n    originalJsonTextLength: json.length,\n    normalizedJsonTextLength: normalizedJsonTextLength,\n    fragmentsInfo,\n  };\n}\n\n\n\ntype FragmentIndex = {\n  [hash: string]: JsonFragment[]\n};\n\n\nconst computeDedupFragmentIndex = (rootValue: JsonValue, { indexPredicate }: Options): FragmentIndex => {\n\n\n  const addFragmentToIndex = (fragmentIndex: FragmentIndex, fragment: JsonFragment): FragmentIndex => {\n    const hash = stableStringify(fragment.value);\n    const previousSetForHash = fragmentIndex[hash] || [];\n    return {\n      ...fragmentIndex,\n      [hash]: [...previousSetForHash, fragment]\n    };\n  }\n\n\n  const indexObject = (value: JsonValue, path: Path, index: FragmentIndex): FragmentIndex => {\n    if (value == null || value == undefined) {\n      return index;\n    }\n    if (!indexPredicate(value, path)) {\n      return index;\n    }\n\n    index = addFragmentToIndex(index, { value: value, path: path });\n\n\n    if (Array.isArray(value) || typeof value === 'object') {\n      return Object.keys(value).reduce(\n        (index, key) => {\n          const newPath = [...path, key];\n          const newValue = (value as any)[key] as JsonValue;\n          return indexObject(newValue, newPath, index);\n        }\n        , index);\n    } else {\n      return index;\n    }\n  }\n\n  const rootPath: Path = [];\n  const emptyIndex: FragmentIndex = {};\n  return indexObject(rootValue, rootPath, emptyIndex);\n}\n\n\n","import React from \"react\";\n\nimport stableStringify from 'json-stable-stringify';\nimport { keys } from \"@material-ui/core/styles/createBreakpoints\";\n\nexport type Interner = <T extends any>(orginal: T) => T;\n\n\nexport const makeInterner = (): Interner => {\n    const cache = new Map<string, any>();\n\n    return (value) => {\n        const key = stableStringify(value);\n        if (cache.has(key)) {\n            return cache.get(key);\n        } else {\n            cache.set(key, value);\n            return value;\n        }\n    }\n};\n\nexport const useInterner = () => {\n    return React.useMemo(makeInterner, []);\n};","import './App.css';\n\nimport TextField from '@material-ui/core/TextField';\nimport React, { ChangeEvent } from 'react';\n\nimport { object } from 'prop-types';\nimport { computeJsonDupsInfo, FragmentInfo, JsonDupsInfo, JsonFragment } from './computeDedupInfo';\nimport { makeStyles } from '@material-ui/styles';\nimport { useInterner } from './interner';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport { Typography, FormControlLabel } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\n\n\nconst duplicateValue = { whatever: 'This object is used several times' };\nconst exampleJson = JSON.stringify(\n  {\n    prop1: duplicateValue,\n    prop2: duplicateValue,\n    prop3: {\n      prop4: duplicateValue,\n      prop5: [\n        duplicateValue,\n        duplicateValue,\n        'otherValue'\n      ]\n    },\n  }, null, '  ');\n\n\n\nconst App: React.FC = () => {\n  const [json, setJson] = React.useState(exampleJson);\n  const handleJsonChange = React.useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setJson(event.target.value);\n  }, [setJson]);\n\n  const [includeString, setIncludeString] = React.useState(false);\n  const handleIncludeStringChange = React.useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setIncludeString(event.target.checked);\n  }, [setIncludeString]);\n\n\n  const dedupInfo: JsonDupsInfo = React.useMemo(() => computeJsonDupsInfo(json, {\n    indexPredicate: (value, path) => (typeof value !== 'number' && typeof value !== 'boolean' && (includeString || typeof value !== 'string')),\n    maxFragmentsLimit: 20\n  }), [json, includeString]);\n\n\n  const interner = useInterner();\n\n  return (\n    <div className=\"App\"\n      style={\n        interner({\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          margin: '8px',\n        })\n      }>\n\n\n      <TextField\n        id=\"json-text\"\n        label=\"Json\"\n        multiline\n        rows=\"15\"\n        rowsMax=\"15\"\n        value={json}\n        onChange={handleJsonChange}\n        margin=\"normal\"\n        variant=\"outlined\"\n        style={\n          interner({ width: '100%' })\n        }\n      />\n      <FormControlLabel\n        label=\"Include strings\"\n        control={\n          <Checkbox\n            id=\"include-string-checkbox\"\n            checked={includeString}\n            onChange={handleIncludeStringChange}\n          />}>\n      </FormControlLabel>\n\n\n\n      <Typography variant=\"h6\">\n        Original JSON is {dedupInfo.normalizedJsonTextLength} characters ({dedupInfo.originalJsonTextLength} before restringify).\n        Found {dedupInfo.fragmentsInfo.length} duplicated fragments.\n      </Typography>\n      <div>\n        {dedupInfo.fragmentsInfo.map((fragInfo, index) => (\n          <ExpansionPanel key={index}>\n            <ExpansionPanelSummary>\n              <Typography>Fragment [{ellipsis(fragInfo.preview, 50)}]: Found {fragInfo.fragmentsCount} times totalling {fragInfo.stringifiedLength} characters ({fragInfo.percentOfTotalLength}%).</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <div style={{ width: '100%' }}>\n                {fragInfo.fragments.map((fragment, index) => (\n                  <FragmentViewer key={index} fragment={fragment} />\n                ))\n                }\n              </div>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        ))\n        }\n      </div>\n    </div>\n  );\n}\n\ntype FragmentViewerProps = { fragment: JsonFragment };\nconst FragmentViewer = React.memo(\n  ({ fragment }: FragmentViewerProps) => {\n    const [expanded, setExpanded] = React.useState(false);\n    const handleChange = React.useCallback((event, isExpanded) => {\n      setExpanded(isExpanded);\n    }, [setExpanded]);\n    return <ExpansionPanel expanded={expanded} onChange={handleChange}>\n      <ExpansionPanelSummary>\n        <Typography>Path: {fragment.path.join('.')}</Typography>\n      </ExpansionPanelSummary>\n      <ExpansionPanelDetails>\n        {expanded && <pre>\n          {prettyJson(fragment.value)}\n        </pre>\n        }\n      </ExpansionPanelDetails>\n    </ExpansionPanel>\n  });\n\nconst ellipsis = (string: string, maxLength: number = 100) => {\n  if (string.length > maxLength) {\n    return string.substr(0, maxLength - 1) + '…';\n  } else {\n    return string;\n  }\n}\n\nfunction prettyJson(value: any): React.ReactNode {\n  return JSON.stringify(value, null, '  ');\n}\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}