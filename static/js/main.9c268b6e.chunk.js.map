{"version":3,"sources":["AnalyzerResultViewer/FragmentViewer.tsx","utils/prettyStringify.ts","AnalyzerResultViewer/AnalyzerResultViewer.tsx","utils/ellipsis.ts","analyzer/analyzeJson.ts","utils/interner.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["FragmentViewer","React","memo","_ref","value","fragment","_React$useState","useState","_React$useState2","Object","slicedToArray","expanded","setExpanded","handleChange","useCallback","event","isExpanded","react_default","a","createElement","ExpansionPanel","onChange","ExpansionPanelSummary","Typography","path","join","ExpansionPanelDetails","JSON","stringify","AnalyzerResultViewer","result","Fragment","variant","compactJsonLength","originalJsonLength","fragmentsInfo","length","map","fragInfo","index","key","string","maxLength","arguments","undefined","substr","ellipsis","preview","fragmentsCount","stringifiedLength","percentOfTotalLength","style","width","fragments","defaultOptions","indexPredicate","maxFragmentsLimit","computeDedupFragmentIndex","rootValue","_ref3","indexObject","fragmentIndex","hash","stableStringify","previousSetForHash","objectSpread","defineProperty","concat","toConsumableArray","addFragmentToIndex","Array","isArray","keys","reduce","newPath","newValue","makeInterner","cache","Map","has","get","set","duplicateValue","whatever","exampleJson","prop1","prop2","prop3","prop4","prop5","App","json","setJson","handleJsonChange","target","_React$useState3","_React$useState4","includeString","setIncludeString","handleIncludeStringChange","checked","analyzerResult","useMemo","options","optionsWithDefaults","parse","normalizedJsonTextLength","entries","_ref2","f","sum","v","filter","dupInfo","sort","b","slice","analyzeJson","interner","className","height","display","flexDirection","margin","TextField","id","label","multiline","rows","rowsMax","FormControlLabel","control","Checkbox","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9c268b6e.chunk.js","sourcesContent":["import { Typography } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport React from 'react';\n\nimport { JsonFragment } from '../analyzer/JsonFragment';\nimport { prettyStringify } from '../utils/prettyStringify';\n\nexport type FragmentViewerProps = { fragment: JsonFragment };\nexport const FragmentViewer = React.memo(\n    ({ fragment }: FragmentViewerProps) => {\n        const [expanded, setExpanded] = React.useState(false);\n        const handleChange = React.useCallback((event, isExpanded) => {\n            setExpanded(isExpanded);\n        }, [setExpanded]);\n        return <ExpansionPanel expanded={expanded} onChange={handleChange}>\n            <ExpansionPanelSummary>\n                <Typography>Path: {fragment.path.join('.')}</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n                {expanded && <pre>\n                    {prettyStringify(fragment.value)}\n                </pre>\n                }\n            </ExpansionPanelDetails>\n        </ExpansionPanel>\n    });","export const prettyStringify = (value: any): string => {\n    return JSON.stringify(value, null, '  ');\n}\n","import { Typography } from '@material-ui/core';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport React from 'react';\n\nimport { AnalyzerResult } from \"../analyzer/AnalyzerResult\";\nimport { FragmentViewer } from './FragmentViewer';\nimport { ellipsis } from '../utils/ellipsis';\n\nexport type AnalyzerResultViewerProps = {\n    result: AnalyzerResult\n};\nexport const AnalyzerResultViewer = React.memo(({ result }: AnalyzerResultViewerProps) => {\n    return <>\n        <Typography variant=\"h6\">\n            Original JSON is {result.compactJsonLength} characters ({result.originalJsonLength} before compact rewrite).\n        Found {result.fragmentsInfo.length} duplicated fragments.\n      </Typography>\n        <div>\n            {result.fragmentsInfo.map((fragInfo, index) => (\n                <ExpansionPanel key={index}>\n                    <ExpansionPanelSummary>\n                        <Typography>Fragment [{ellipsis(fragInfo.preview, 50)}]: Found {fragInfo.fragmentsCount} times totalling {fragInfo.stringifiedLength} characters ({fragInfo.percentOfTotalLength}%).</Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <div style={{ width: '100%' }}>\n                            {fragInfo.fragments.map((fragment, index) => (\n                                <FragmentViewer key={index} fragment={fragment} />\n                            ))\n                            }\n                        </div>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>\n            ))\n            }\n        </div></>;\n});","export const ellipsis = (string: string, maxLength: number = 100) => {\n  if (string.length > maxLength) {\n    return string.substr(0, maxLength - 1) + 'â€¦';\n  }\n  else {\n    return string;\n  }\n};\n","import stableStringify from 'json-stable-stringify';\n\nimport { AnalyzerResult } from './AnalyzerResult';\nimport { DuplicateInfo } from './DuplicateInfo';\nimport { JsonFragment } from './JsonFragment';\nimport { JsonValue } from './JsonValue';\nimport { Path } from './Path';\n\n\nexport type AnalyzeOptions = {\n  indexPredicate: (value: JsonValue, path: Path) => boolean;\n  maxFragmentsLimit: number;\n}\n\n\nexport const defaultOptions: AnalyzeOptions = {\n  indexPredicate: (value: JsonValue, path: Path) => true,\n  maxFragmentsLimit: 100\n}\n\n\nexport const analyzeJson = (json: string, options?: Partial<AnalyzeOptions>): AnalyzerResult => {\n  const optionsWithDefaults = { ...defaultOptions, ...options };\n\n  const rootValue = JSON.parse(json);\n  const normalizedJsonTextLength = JSON.stringify(rootValue).length;\n  const fragmentIndex = computeDedupFragmentIndex(rootValue, optionsWithDefaults);\n  const fragmentsInfo = Object.entries(fragmentIndex)\n    .map(\n      ([key, fragments]): DuplicateInfo => {\n        const stringifiedLength = fragments.map(f => JSON.stringify(f.value).length).reduce((sum, v) => sum + v);\n        return {\n          preview: JSON.stringify(fragments[0].value).substr(0, 200),\n          fragmentsCount: fragments.length,\n          stringifiedLength: stringifiedLength,\n          percentOfTotalLength: (stringifiedLength / normalizedJsonTextLength) * 100,\n          fragments,\n\n        }\n      }\n    )\n    .filter(dupInfo => dupInfo.fragmentsCount >= 2)\n    .sort((a, b) => {\n      // Sort descending\n      return b.stringifiedLength - a.stringifiedLength;\n    })\n    .slice(0, optionsWithDefaults.maxFragmentsLimit);\n\n  return {\n    originalJsonLength: json.length,\n    compactJsonLength: normalizedJsonTextLength,\n    fragmentsInfo,\n  };\n}\n\n\n\ntype FragmentIndex = {\n  [hash: string]: JsonFragment[]\n};\n\n\nconst computeDedupFragmentIndex = (rootValue: JsonValue, { indexPredicate }: AnalyzeOptions): FragmentIndex => {\n\n\n  const addFragmentToIndex = (fragmentIndex: FragmentIndex, fragment: JsonFragment): FragmentIndex => {\n    const hash = stableStringify(fragment.value);\n    const previousSetForHash = fragmentIndex[hash] || [];\n    return {\n      ...fragmentIndex,\n      [hash]: [...previousSetForHash, fragment]\n    };\n  }\n\n\n  const indexObject = (value: JsonValue, path: Path, index: FragmentIndex): FragmentIndex => {\n    if (value === null || value === undefined) {\n      return index;\n    }\n    if (!indexPredicate(value, path)) {\n      return index;\n    }\n\n    index = addFragmentToIndex(index, { value: value, path: path });\n\n\n    if (Array.isArray(value) || typeof value === 'object') {\n      return Object.keys(value).reduce(\n        (index, key) => {\n          const newPath = [...path, key];\n          const newValue = (value as any)[key] as JsonValue;\n          return indexObject(newValue, newPath, index);\n        }\n        , index);\n    } else {\n      return index;\n    }\n  }\n\n  const rootPath: Path = [];\n  const emptyIndex: FragmentIndex = {};\n  return indexObject(rootValue, rootPath, emptyIndex);\n}\n\n\n","import stableStringify from 'json-stable-stringify';\nimport React from 'react';\n\nexport type Interner = <T extends any>(orginal: T) => T;\n\n\nexport const makeInterner = (): Interner => {\n    const cache = new Map<string, any>();\n\n    return (value) => {\n        const key = stableStringify(value);\n        if (cache.has(key)) {\n            return cache.get(key);\n        } else {\n            cache.set(key, value);\n            return value;\n        }\n    }\n};\n\nexport const useInterner = () => {\n    return React.useMemo(makeInterner, []);\n};","import './App.css';\n\nimport { FormControlLabel } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport TextField from '@material-ui/core/TextField';\nimport React, { ChangeEvent } from 'react';\n\nimport { AnalyzerResultViewer } from './AnalyzerResultViewer/AnalyzerResultViewer';\nimport { analyzeJson } from './analyzer/analyzeJson';\nimport { AnalyzerResult } from './analyzer/AnalyzerResult';\nimport { useInterner } from './utils/interner';\n\n\nconst duplicateValue = { whatever: 'This object is used several times' };\nconst exampleJson = JSON.stringify(\n  {\n    prop1: duplicateValue,\n    prop2: duplicateValue,\n    prop3: {\n      prop4: duplicateValue,\n      prop5: [\n        duplicateValue,\n        duplicateValue,\n        'otherValue'\n      ]\n    },\n  }, null, '  ');\n\n\n\nconst App: React.FC = () => {\n  const [json, setJson] = React.useState(exampleJson);\n  const handleJsonChange = React.useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setJson(event.target.value);\n  }, [setJson]);\n\n  const [includeString, setIncludeString] = React.useState(false);\n  const handleIncludeStringChange = React.useCallback((event: ChangeEvent<HTMLInputElement>) => {\n    setIncludeString(event.target.checked);\n  }, [setIncludeString]);\n\n\n  const analyzerResult: AnalyzerResult = React.useMemo(() => analyzeJson(json, {\n    indexPredicate: (value, path) => (typeof value !== 'number' && typeof value !== 'boolean' && (includeString || typeof value !== 'string')),\n    maxFragmentsLimit: 20\n  }), [json, includeString]);\n\n\n  const interner = useInterner();\n\n  return (\n    <div className=\"App\"\n      style={\n        interner({\n          height: '100%',\n          display: 'flex',\n          flexDirection: 'column',\n          margin: '8px',\n        })\n      }>\n\n\n      <TextField\n        id=\"json-text\"\n        label=\"Json\"\n        multiline\n        rows=\"15\"\n        rowsMax=\"15\"\n        value={json}\n        onChange={handleJsonChange}\n        margin=\"normal\"\n        variant=\"outlined\"\n        style={\n          interner({ width: '100%' })\n        }\n      />\n      <FormControlLabel\n        label=\"Include strings\"\n        control={\n          <Checkbox\n            id=\"include-string-checkbox\"\n            checked={includeString}\n            onChange={handleIncludeStringChange}\n          />}>\n      </FormControlLabel>\n\n\n      <AnalyzerResultViewer result={analyzerResult} />\n\n\n    </div>\n  );\n}\n\n\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}